{
    "sourceFile": "server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1731774818605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731775022272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n const path = require('path');\r\n \r\n // Setup Express\r\n const app = express();\r\n-const PORT = ;\r\n+const PORT = 5;\r\n \r\n app.use(express.static(path.join(__dirname, 'public')));\r\n \r\n // Start HTTP server\r\n"
                },
                {
                    "date": 1731775426178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+const express = require('express');\r\n+const { WebSocketServer } = require('ws');\r\n+const path = require('path');\r\n+\r\n+const app = express();\r\n+const PORT = 5;\r\n+\r\n+app.use(express.static(path.join(__dirname, 'public')));\r\n+\r\n+const server = app.listen(PORT, () => {\r\n+  console.log(`Server running on http://localhost:${PORT}`);\r\n+});\r\n+\r\n+const wss = new WebSocketServer({ server });\r\n+\r\n+const rooms = {}; // { roomName: [ { username, socket } ] }\r\n+\r\n+wss.on('connection', (ws) => {\r\n+  ws.on('message', (data) => {\r\n+    const message = JSON.parse(data);\r\n+\r\n+    switch (message.type) {\r\n+      case 'join':\r\n+        handleJoin(ws, message);\r\n+        break;\r\n+\r\n+      case 'message':\r\n+        handleMessage(ws, message.text);\r\n+        break;\r\n+\r\n+      case 'leave':\r\n+        handleLeave(ws);\r\n+        break;\r\n+    }\r\n+  });\r\n+\r\n+  ws.on('close', () => handleLeave(ws));\r\n+});\r\n+\r\n+function handleJoin(ws, { username, room }) {\r\n+  if (!username || !room) {\r\n+    ws.send(JSON.stringify({ type: 'error', message: 'Invalid username or room.' }));\r\n+    return;\r\n+  }\r\n+\r\n+  // Ensure room exists\r\n+  if (!rooms[room]) rooms[room] = [];\r\n+\r\n+  // Check if username is unique in the room\r\n+  const userExists = rooms[room].some((client) => client.username === username);\r\n+  if (userExists) {\r\n+    ws.send(JSON.stringify({ type: 'error', message: 'Username already taken in this room.' }));\r\n+    ws.close();\r\n+    return;\r\n+  }\r\n+\r\n+  // Store user and room data\r\n+  ws.username = username;\r\n+  ws.room = room;\r\n+  rooms[room].push({ username, socket: ws });\r\n+\r\n+  broadcast(room, {\r\n+    type: 'system',\r\n+    message: `${username} joined the room.`,\r\n+  });\r\n+\r\n+  ws.send(\r\n+    JSON.stringify({\r\n+      type: 'success',\r\n+      message: `Welcome to the room, ${username}!`,\r\n+    })\r\n+  );\r\n+}\r\n+\r\n+function handleMessage(ws, text) {\r\n+  if (!ws.room || !ws.username) return;\r\n+\r\n+  broadcast(ws.room, {\r\n+    type: 'chat',\r\n+    username: ws.username,\r\n+    message: text,\r\n+    timestamp: new Date().toLocaleTimeString(),\r\n+  });\r\n+}\r\n+\r\n+function handleLeave(ws) {\r\n+  if (!ws.room || !ws.username) return;\r\n+\r\n+  rooms[ws.room] = rooms[ws.room].filter((client) => client.socket !== ws);\r\n+\r\n+  broadcast(ws.room, {\r\n+    type: 'system',\r\n+    message: `${ws.username} left the room.`,\r\n+  });\r\n+}\r\n+\r\n+function broadcast(room, message) {\r\n+  if (!rooms[room]) return;\r\n+\r\n+  rooms[room].forEach((client) => {\r\n+    client.socket.send(JSON.stringify(message));\r\n+  });\r\n+}\r\n"
                }
            ],
            "date": 1731774818605,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst { WebSocketServer } = require('ws');\r\nconst path = require('path');\r\n\r\n// Setup Express\r\nconst app = express();\r\nconst PORT = 3000;\r\n\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\n// Start HTTP server\r\nconst server = app.listen(PORT, () => {\r\n  console.log(`Server running on http://localhost:${PORT}`);\r\n});\r\n\r\n// Setup WebSocket server\r\nconst wss = new WebSocketServer({ server });\r\n\r\n// Store rooms and users\r\nconst rooms = {};\r\n\r\nwss.on('connection', (ws) => {\r\n  ws.on('message', (data) => {\r\n    const message = JSON.parse(data);\r\n    \r\n    switch (message.type) {\r\n      case 'join':\r\n        const { room, username } = message;\r\n        ws.username = username;\r\n        ws.room = room;\r\n\r\n        if (!rooms[room]) rooms[room] = [];\r\n        rooms[room].push(ws);\r\n\r\n        broadcast(room, {\r\n          type: 'system',\r\n          message: `${username} joined the room.`,\r\n        });\r\n        break;\r\n\r\n      case 'message':\r\n        broadcast(ws.room, {\r\n          type: 'chat',\r\n          username: ws.username,\r\n          message: message.text,\r\n          timestamp: new Date().toLocaleTimeString(),\r\n        });\r\n        break;\r\n\r\n      case 'leave':\r\n        leaveRoom(ws);\r\n        break;\r\n    }\r\n  });\r\n\r\n  ws.on('close', () => leaveRoom(ws));\r\n});\r\n\r\nfunction broadcast(room, message) {\r\n  if (rooms[room]) {\r\n    rooms[room].forEach((client) => client.send(JSON.stringify(message)));\r\n  }\r\n}\r\n\r\nfunction leaveRoom(ws) {\r\n  if (ws.room && rooms[ws.room]) {\r\n    rooms[ws.room] = rooms[ws.room].filter((client) => client !== ws);\r\n    broadcast(ws.room, {\r\n      type: 'system',\r\n      message: `${ws.username} left the room.`,\r\n    });\r\n  }\r\n}\r\n"
        }
    ]
}